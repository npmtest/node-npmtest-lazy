{"/home/travis/build/npmtest/node-npmtest-lazy/test.js":"/* istanbul instrument in package npmtest_lazy */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-lazy/lib.npmtest_lazy.js":"/* istanbul instrument in package npmtest_lazy */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_lazy = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_lazy = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-lazy/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-lazy && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_lazy */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_lazy\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_lazy.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_lazy.rollup.js'] =\n            local.assetsDict['/assets.npmtest_lazy.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_lazy.__dirname + '/lib.npmtest_lazy.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-lazy/node_modules/lazy/lazy.js":"var EventEmitter = require('events').EventEmitter;\nvar util = require('util');\nvar stream = require('stream');\n\nfunction Lazy(em, opts) {\n    if (!(this instanceof Lazy)) return new Lazy(em, opts);\n    EventEmitter.call(this);\n    var self = this;\n\n\n    self.once = function (name, f) {\n        self.on(name, function g () {\n            self.removeListener(name, g);\n            f.apply(this, arguments);\n        });\n    }\n\n    if (!opts) opts = {};\n    var dataName = opts.data || 'data';\n    var pipeName = opts.pipe || 'pipe';\n    var endName = opts.pipe || 'end';\n\n    if (pipeName != endName) {\n        var piped = false;\n        self.once(pipeName, function () { piped = true });\n        self.once(endName, function () {\n            if (!piped) self.emit(pipeName);\n        });\n    }\n\n    self.push = function (x) {\n        self.emit(dataName, x);\n    }\n\n    self.end = function () {\n        self.emit(endName);\n    }\n\n    if (em && em.on) {\n        em.on(endName, function () {\n            self.emit(endName);\n        });\n        self.on(pipeName, function () {\n            em.emit(pipeName);\n        });\n        // Check for v0.10 or Greater (Stream2 has Duplex type)\n        if (stream.Duplex && em instanceof(stream)) {\n            em.on('readable', function () {\n                var x = em.read();\n                self.emit(dataName, x);\n            });\n        } else {\n            // Old Stream1 or Event support\n            em.on(dataName, function (x) {\n                self.emit(dataName, x);\n            });\n        }\n    }\n\n    function newLazy (g, h, l) {\n        if (!g) {\n            g = function () {\n                return true;\n            };\n        }\n        if (!h) {\n            h = function (x) {\n                return x;\n            };\n        }\n        var lazy = new Lazy(null, opts, l);\n        self.on(dataName, function (x, y) {\n            if (g.call(lazy, x)) {\n                lazy.emit(dataName, h(x), y);\n            }\n        });\n        self.once(pipeName, function () {\n            lazy.emit(pipeName);\n        });\n        return lazy;\n    }\n\n    self.filter = function (f) {\n        return newLazy(function (x) {\n            return f(x);\n        });\n    }\n\n    self.forEach = function (f) {\n        return newLazy(function (x) {\n            f(x);\n            return true;\n        });\n    }\n\n    self.map = function (f) {\n        return newLazy(\n            function () { return true },\n            function (x) { return f(x) }\n        );\n    }\n\n    self.head = function (f) {\n        var lazy = newLazy();\n        lazy.on(dataName, function g (x) {\n            f(x)\n            lazy.removeListener(dataName, g)\n        })\n    }\n\n    self.tail = function () {\n        var skip = true;\n        return newLazy(function () {\n            if (skip) {\n                skip = false;\n                return false;\n            }\n            return true;\n        });\n    }\n\n    self.skip = function (n) {\n        return newLazy(function () {\n            if (n > 0) {\n                n--;\n                return false;\n            }\n            return true;\n        });\n    }\n\n    self.take = function (n) {\n        return newLazy(function () {\n            if (n == 0) self.emit(pipeName);\n            return n-- > 0;\n        });\n    }\n\n    self.takeWhile = function (f) {\n        var cond = true;\n        return newLazy(function (x) {\n            if (cond && f(x)) return true;\n            cond = false;\n            self.emit(pipeName);\n            return false;\n        });\n    }\n\n    self.foldr = function (op, i, f) {\n        var acc = i;\n        var lazy = newLazy();\n        lazy.on(dataName, function g (x) {\n            acc = op(x, acc);\n        });\n        lazy.once(pipeName, function () {\n            f(acc);\n        });\n    }\n\n    self.sum = function (f) {\n        return self.foldr(function (x, acc) { return x + acc }, 0, f);\n    }\n\n    self.product = function (f) {\n        return self.foldr(function (x, acc) { return x*acc }, 1, f);\n    }\n\n    self.join = function (f) {\n        var data = []\n        var lazy = newLazy(function (x) {\n            data.push(x);\n            return true;\n        });\n        lazy.once(pipeName, function () { f(data) });\n        return self;\n    }\n\n    self.bucket = function (init, f) {\n        var lazy = new Lazy(null, opts);\n        var yieldTo = function (x) {\n            lazy.emit(dataName, x);\n        };\n\n        var acc = init;\n\n        self.on(dataName, function (x) {\n            acc = f.call(yieldTo, acc, x);\n        });\n\n        self.once(pipeName, function () {\n            lazy.emit(pipeName);\n        });\n\n        // flush on end event\n        self.once(endName, function () {\n            var finalBuffer = mergeBuffers(acc);\n            if (finalBuffer) {\n                yieldTo(finalBuffer);\n            }\n        });\n\n        return lazy;\n    }\n\n    // Streams that use this should emit strings or buffers only\n    self.__defineGetter__('lines', function () {\n        return self.bucket([], function (chunkArray, chunk) {\n            var newline = '\\n'.charCodeAt(0), lastNewLineIndex = 0;\n            if (typeof chunk === 'string') chunk = new Buffer(chunk);\n        if (chunk){\n            \tfor (var i = 0; i < chunk.length; i++) {\n                \tif (chunk[i] === newline) {\n                    \t// If we have content from the current chunk to append to our buffers, do it.\n                    \t\tif (i > 0) {\n                        \t\tchunkArray.push(chunk.slice(lastNewLineIndex, i));\n                    \t\t}\n\n                    \t\t// Wrap all our buffers and emit it.\n                    \t\tthis(mergeBuffers(chunkArray));\n                    \t\tlastNewLineIndex = i + 1;\n                \t}\n            }\n\t    }\n\n            if (lastNewLineIndex > 0) {\n                // New line found in the chunk, push the remaining part of the buffer.\n                if (lastNewLineIndex < chunk.length) {\n                    chunkArray.push(chunk.slice(lastNewLineIndex));\n                }\n            } else {\n                // No new line found, push the whole buffer.\n                if (chunk && chunk.length) {\n                    chunkArray.push(chunk);\n                }\n            }\n            return chunkArray;\n        });\n    });\n}\n\nLazy.range = function () {\n    var args = arguments;\n    var step = 1;\n    var infinite = false;\n\n    if (args.length == 1 && typeof args[0] == 'number') {\n        var i = 0, j = args[0];\n    }\n    else if (args.length == 1 && typeof args[0] == 'string') { // 'start[,next]..[end]'\n        var arg = args[0];\n        var startOpen = false, endClosed = false;\n        if (arg[0] == '(' || arg[0] == '[') {\n            if (arg[0] == '(') startOpen = true;\n            arg = arg.slice(1);\n        }\n        if (arg.slice(-1) == ']') endClosed = true;\n\n        var parts = arg.split('..');\n        if (parts.length != 2)\n            throw new Error(\"single argument range takes 'start..' or 'start..end' or 'start,next..end'\");\n\n        if (parts[1] == '') { // 'start..'\n            var i = parts[0];\n            infinite = true;\n        }\n        else { // 'start[,next]..end'\n            var progression = parts[0].split(',');\n            if (progression.length == 1) { // start..end\n                var i = parts[0], j = parts[1];\n            }\n            else { // 'start,next..end'\n                var i = progression[0], j = parts[1];\n                step = Math.abs(progression[1]-i);\n            }\n        }\n\n        i = parseInt(i, 10);\n        j = parseInt(j, 10);\n\n        if (startOpen) {\n            if (infinite || i < j) i++;\n            else i--;\n        }\n\n        if (endClosed) {\n            if (i < j) j++;\n            else j--;\n        }\n    }\n    else if (args.length == 2 || args.length == 3) { // start, end[, step]\n        var i = args[0], j = args[1];\n        if (args.length == 3) {\n            var step = args[2];\n        }\n    }\n    else {\n        throw new Error(\"range takes 1, 2 or 3 arguments\");\n    }\n    var lazy = new Lazy;\n    var stopInfinite = false;\n    lazy.on('pipe', function () {\n        stopInfinite = true;\n    });\n    if (infinite) {\n        process.nextTick(function g () {\n            if (stopInfinite) return;\n            lazy.emit('data', i++);\n            process.nextTick(g);\n        });\n    }\n    else {\n        process.nextTick(function () {\n            if (i < j) {\n                for (; i<j; i+=step) {\n                    lazy.emit('data', i)\n                }\n            }\n            else {\n                for (; i>j; i-=step) {\n                    lazy.emit('data', i)\n                }\n            }\n            lazy.emit('end');\n        });\n    }\n    return lazy;\n}\n\nvar mergeBuffers = function mergeBuffers(buffers) {\n  // We expect buffers to be a non-empty Array\n  if (!buffers || !Array.isArray(buffers) || !buffers.length) return;\n\n  var finalBufferLength, finalBuffer, currentBuffer, currentSize = 0;\n\n  // Sum all the buffers lengths\n  finalBufferLength = buffers.reduce(function(left, right) { return (left.length||left) + (right.length||right); }, 0);\n  finalBuffer = new Buffer(finalBufferLength);\n  while(buffers.length) {\n    currentBuffer = buffers.shift();\n    currentBuffer.copy(finalBuffer, currentSize);\n    currentSize += currentBuffer.length;\n  }\n\n  return finalBuffer;\n}\n\n\nutil.inherits(Lazy, EventEmitter);\nmodule.exports = Lazy;\n"}